name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name to release (e.g., v0.2.1)'
        required: true
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      TAG: ${{ github.event.inputs.tag != '' && github.event.inputs.tag || (startsWith(github.ref, 'refs/tags/') && github.ref_name || (github.event_name == 'release' && github.event.release.tag_name || '')) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==6.10.*

      - name: Write version files
        shell: pwsh
        run: |
          $tag = "${{ github.event.inputs.tag }}"; if (-not $tag) { $tag = "${{ github.ref_name }}" }
          if (-not $tag) { $tag = "${{ github.event.release.tag_name }}" }
          if (-not $tag) { $tag = "v0.0.0" }
          $ver = $tag.TrimStart('v')
          Set-Content -Path app_version.txt -Value $tag -Encoding utf8
          @"
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=($($ver -replace '\.',','), 0),
    prodvers=($($ver -replace '\.',','), 0),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo([
      StringTable('040904B0', [
        StringStruct('CompanyName', 'Nikitzima'),
        StringStruct('FileDescription', 'YT-DLP GUI'),
        StringStruct('FileVersion', '$ver'),
        StringStruct('ProductName', 'YT-DLP GUI'),
        StringStruct('ProductVersion', '$ver'),
        StringStruct('OriginalFilename', 'YT-DLP GUI.exe')
      ])
    ]),
    VarFileInfo([VarStruct('Translation', [1033, 1200])])
  ]
)
"@ | Set-Content -Path file_version_info.txt -Encoding utf8

      - name: Download ffmpeg.exe (for bundling)
        shell: pwsh
        run: |
          $ProgressPreference='SilentlyContinue'
          $zip = "$env:RUNNER_TEMP/ffmpeg.zip"
          Invoke-WebRequest -Uri https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-win64-gpl.zip -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath "$env:RUNNER_TEMP/ffmpeg" -Force
          $ff = Get-ChildItem -Path "$env:RUNNER_TEMP/ffmpeg" -Filter ffmpeg.exe -Recurse | Select-Object -First 1
          Copy-Item $ff.FullName -Destination "ffmpeg.exe"

      - name: Build with PyInstaller
        run: pyinstaller "YT-DLP GUI.spec"

      - name: Download yt-dlp.exe
        shell: pwsh
        run: |
          $ProgressPreference='SilentlyContinue'
          New-Item -ItemType Directory -Force -Path dist/bin | Out-Null
          Invoke-WebRequest -Uri https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -OutFile dist/bin/yt-dlp.exe

      - name: Prepare artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          Copy-Item "dist/YT-DLP GUI.exe" "artifacts/YT-DLP_GUI.exe" -Force
          $tag = "${{ env.TAG }}"; if (-not $tag) { $tag = $env:GITHUB_REF_NAME }; if (-not $tag) { $tag = "${{ github.event.release.tag_name }}" }
          Compress-Archive -Path "dist/YT-DLP GUI.exe","dist/ffmpeg.exe","dist/bin" -DestinationPath "artifacts/YT-DLP_GUI_portable_$tag.zip" -Force

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: artifacts/*
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: build-windows
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: artifacts

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag != '' && github.event.inputs.tag || (startsWith(github.ref, 'refs/tags/') && github.ref_name || (github.event_name == 'release' && github.event.release.tag_name || '')) }}
          files: artifacts/*
          make_latest: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
